{"version":3,"sources":["Button.js","App.js","serviceWorker.js","index.js"],"names":["Button","props","state","active","deltaX","deltaY","n","myRef","React","createRef","e","this","current","getBoundingClientRect","x","y","clientX","clientY","setState","console","log","className","onClick","dot","bind","ref","write","style","left","top","onAnimationEnd","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2RAGqBA,G,8DACnB,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAQ,CACXC,QAAQ,EACRC,OAAQ,EACRC,OAAQ,EACRC,EAAG,GAEL,EAAKC,MAAQC,IAAMC,YARH,E,gDAWdC,GAAG,IAAD,EACSC,KAAKJ,MAAMK,QAAQC,wBAA3BC,EADD,EACCA,EAAGC,EADJ,EACIA,EAEJX,EADqBM,EAApBM,QACkBF,EAAI,EACvBT,EAFqBK,EAAXO,QAESF,EAAI,EAE3BJ,KAAKO,SAAS,CACZf,QAAQ,EACRG,EAAGK,KAAKT,MAAMI,EAAE,EAChBF,OAAQA,EACRC,OAAQA,M,0BAKVc,QAAQC,IAAI,OACZT,KAAKO,SAAS,CACZf,QAAQ,M,+BAKV,OACE,yBAAKkB,UAAU,WACb,4BAAQC,QAASX,KAAKY,IAAIC,KAAKb,MAAOU,UAAU,MAAMI,IAAKd,KAAKJ,OAC9D,0BAAMc,UAAU,YAAYV,KAAKV,MAAMyB,OACvC,oCAAUf,KAAKT,MAAMI,EAArB,UAEEK,KAAKT,MAAMC,OACT,0BAAMkB,UAAU,MAAMM,MAAO,CAACC,KAAMjB,KAAKT,MAAME,OAAQyB,IAAKlB,KAAKT,MAAMG,QACrEyB,eAAgBnB,KAAKI,EAAES,KAAKb,QACnB,S,GA3CWoB,cCoBrBC,E,kDAlBb,aAAc,IAAD,8BACX,gBACK9B,MAAQ,CACXI,EAAG,GAHM,E,qDAQX,OACE,yBAAKe,UAAU,OACb,kBAAC,EAAD,CAAQK,MAAM,uBACd,kBAAC,EAAD,CAAQA,MAAM,6BACd,kBAAC,EAAD,CAAQA,MAAM,gB,GAbJlB,IAAMuB,WCQJE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/B,QAAQ+B,MAAMA,EAAMC,c","file":"static/js/main.15bc5783.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './Button.css';\n\nexport default class Button extends Component{\n  constructor(props){\n    super(props)\n    this.state = {\n      active: false,\n      deltaX: 0,\n      deltaY: 0,\n      n: 0\n    }\n    this.myRef = React.createRef()\n  }\n\n  dot(e){\n    let {x, y} = this.myRef.current.getBoundingClientRect()\n    let {clientX, clientY} = e\n    let deltaX = clientX - x - 6\n    let deltaY = clientY - y - 6\n\n    this.setState({\n      active: true,\n      n: this.state.n+1,\n      deltaX: deltaX,\n      deltaY: deltaY\n    })\n  }\n\n  y(){\n    console.log('111')\n    this.setState({\n      active: false\n    })\n  }\n\n  render(){\n    return (\n      <div className=\"wrapper\">\n        <button onClick={this.dot.bind(this)} className=\"btn\" ref={this.myRef}>\n          <span className=\"btn-font\">{this.props.write}</span>\n          <span> - {this.state.n}次</span>\n          {\n            this.state.active ?\n              <span className=\"dot\" style={{left: this.state.deltaX, top: this.state.deltaY}}\n                onAnimationEnd={this.y.bind(this)}\n              ></span> : ''\n          }\n        </button>\n      </div>\n    )\n  }\n}","import React from 'react';\nimport './App.css';\nimport Button from './Button';\n\nclass App extends React.Component {\n  constructor(){\n    super()\n    this.state = {\n      n: 0\n    }\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <Button write=\"点我呀\"/>\n        <Button write=\"你点我呀\"/>\n        <Button write=\"哼\"/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}